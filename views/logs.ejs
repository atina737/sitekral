<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('includes/head') %>
</head>

<body>
    <!-- Begin page -->
    <div class="wrapper">
        
        <%- include('includes/sidebar') %>
        <%- include('includes/topbar') %>

        <div class="page-content">
            <div class="page-container">
                
                <div class="page-title-head d-flex align-items-center gap-2">
                    <div class="flex-grow-1">
                        <h4 class="fs-17 mb-0">Tüm Sorgu Kayıtları</h4>
                    </div>
                    <div class="text-end">
                        <ol class="breadcrumb m-0 py-0 fs-13">
                            <li class="breadcrumb-item"><a href="javascript: void(0);"><%= name %></a></li>
                            <li class="breadcrumb-item"><a href="javascript: void(0);">Sistem</a></li>
                            <li class="breadcrumb-item active">Sorgu Logları</li>
                        </ol>
                    </div>
                </div>

                <!-- Sorgu Logları -->
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header border-bottom border-dashed d-flex flex-wrap align-items-center gap-2">
                                <div class="flex-grow-1">
                                    <h4 class="card-title">Sorgu Kayıtları</h4>
                                    <small class="text-muted">Tüm kullanıcı sorgularının detaylı kayıtları</small>
                                </div>
                                <div class="d-flex gap-2">
                                    <div class="border rounded d-flex flex-row align-items-center" id="top-search">
                                        <i class="ti ti-search text-muted fs-18 ps-2"></i>
                                        <input type="search" class="form-control border-0" id="searchInput" placeholder="Kullanıcı ara...">
                                    </div>
                                    <button type="button" class="btn btn-outline-primary btn-sm" id="refreshBtn">
                                        <i class="ti ti-refresh me-1"></i>Yenile
                                    </button>
                                </div>
                            </div>

                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table table-hover align-middle mb-0" id="logsTable">
                                        <thead class="bg-light-subtle">
                                            <tr>
                                                <th class="fs-12 text-uppercase text-muted">Kullanıcı</th>
                                                <th class="fs-12 text-uppercase text-muted">Sorgu Tipi</th>
                                                <th class="fs-12 text-uppercase text-muted">Parametreler</th>
                                                <th class="fs-12 text-uppercase text-muted">Sonuç</th>
                                                <th class="fs-12 text-uppercase text-muted">IP</th>
                                                <th class="fs-12 text-uppercase text-muted">Tarih</th>
                                                <th class="text-center fs-12 text-uppercase text-muted" style="width: 100px;">İşlem</th>
                                            </tr>
                                        </thead>
                                        <tbody id="logsBody">
                                            <!-- Logs will be loaded here -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>

                            <div class="card-footer border-0">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="text-muted small">
                                        <span id="logsCount">0 kayıt</span>
                                    </div>
                                    <nav aria-label="Sayfa navigasyonu">
                                        <ul class="pagination pagination-sm mb-0" id="logsPagination">
                                            <!-- Pagination will be generated by JavaScript -->
                                        </ul>
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>

        <%- include('includes/footer') %>
    </div>

    <!-- Vendor js -->
    <script src="/assets/js/vendor.min.js"></script>
    <script src="/assets/js/app.js"></script>

    <style>
        .query-type-badge {
            font-size: 11px;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            font-weight: 600;
        }
        
        .query-type-adsoyad { background: rgba(111, 66, 193, 0.1); color: #6f42c1; }
        .query-type-tc { background: rgba(108, 117, 125, 0.1); color: #6c757d; }
        .query-type-aile { background: rgba(253, 126, 20, 0.1); color: #fd7e14; }
        .query-type-sulale { background: rgba(255, 193, 7, 0.1); color: #ffc107; }
        .query-type-adres { background: rgba(111, 66, 193, 0.1); color: #6f42c1; }
        .query-type-tapu { background: rgba(108, 117, 125, 0.1); color: #6c757d; }
        .query-type-isyeri { background: rgba(13, 110, 253, 0.1); color: #0d6efd; }
        
        .user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 12px;
        }
        
        .result-badge {
            background: rgba(25, 135, 84, 0.1);
            color: #198754;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            font-size: 11px;
            font-weight: 600;
        }
        
        .ip-badge {
            background: rgba(108, 117, 125, 0.1);
            color: #6c757d;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            font-size: 11px;
            font-weight: 500;
        }
        
        .date-text {
            font-size: 12px;
            color: #6c757d;
        }
    </style>

    <script>
    (function() {
        const PAGE_SIZE = 20;
        let currentPage = 1;
        let allLogs = [];
        let filteredLogs = [];
        
        const searchInput = document.getElementById('searchInput');
        const logsBody = document.getElementById('logsBody');
        const logsCount = document.getElementById('logsCount');
        const logsPagination = document.getElementById('logsPagination');
        const refreshBtn = document.getElementById('refreshBtn');

        // Load logs from server
        async function loadLogs() {
            try {
                const response = await fetch('/api/admin/logs', {
                    credentials: 'same-origin'
                });
                const data = await response.json();
                
                if (data.ok) {
                    allLogs = data.logs || [];
                    filteredLogs = [...allLogs];
                    renderLogs();
                } else {
                    console.error('Logs yüklenemedi:', data.message);
                }
            } catch (error) {
                console.error('Logs yükleme hatası:', error);
            }
        }

        // Render logs table
        function renderLogs() {
            const start = (currentPage - 1) * PAGE_SIZE;
            const end = start + PAGE_SIZE;
            const pageLogs = filteredLogs.slice(start, end);
            
            if (pageLogs.length === 0) {
                logsBody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-5">
                            <div class="text-muted">
                                <i class="ti ti-search-off fs-1 mb-3 d-block"></i>
                                <h5>Henüz sorgu kaydı yok</h5>
                                <p>Kullanıcılar sorgu yaptığında burada görünecek.</p>
                            </div>
                        </td>
                    </tr>
                `;
            } else {
                logsBody.innerHTML = pageLogs.map(log => `
                    <tr>
                        <td>
                            <div class="d-flex align-items-center gap-2">
                                <div class="user-avatar">
                                    ${(log.userName || '?')[0].toUpperCase()}
                                </div>
                                <div>
                                    <div class="fw-semibold">${log.userName || 'Bilinmeyen'}</div>
                                    <small class="text-muted">${log.userEmail || ''}</small>
                                </div>
                            </div>
                        </td>
                        <td>
                            <span class="query-type-badge query-type-${getQueryTypeClass(log.queryType)}">
                                ${log.queryType || 'Bilinmeyen'}
                            </span>
                        </td>
                        <td>
                            <div class="text-break" style="max-width: 200px;">
                                ${formatParameters(log.parameters)}
                            </div>
                        </td>
                        <td>
                            <span class="result-badge ${log.success ? '' : 'bg-danger-subtle text-danger'}">
                                ${log.resultCount || 0} sonuç
                                ${!log.success ? ' (Hata)' : ''}
                            </span>
                        </td>
                        <td>
                            <span class="ip-badge">
                                ${log.ip || 'Bilinmeyen'}
                            </span>
                        </td>
                        <td>
                            <span class="date-text">
                                ${formatDate(log.createdAt)}
                            </span>
                        </td>
                        <td class="text-center">
                            <button type="button" class="btn btn-soft-primary btn-sm" onclick="viewLogDetails('${log.id}')">
                                <i class="ti ti-eye me-1"></i>Detay
                            </button>
                        </td>
                    </tr>
                `).join('');
            }
            
            // Update count
            logsCount.textContent = `${filteredLogs.length} kayıt`;
            
            // Update pagination
            updatePagination();
        }

        // Get query type CSS class
        function getQueryTypeClass(queryType) {
            const type = (queryType || '').toLowerCase();
            if (type.includes('ad soyad')) return 'adsoyad';
            if (type.includes('tc')) return 'tc';
            if (type.includes('aile')) return 'aile';
            if (type.includes('sülale')) return 'sulale';
            if (type.includes('adres')) return 'adres';
            if (type.includes('tapu')) return 'tapu';
            if (type.includes('işyeri')) return 'isyeri';
            return 'adsoyad';
        }

        // Format parameters
        function formatParameters(params) {
            if (!params) return '-';
            try {
                const parsed = typeof params === 'string' ? JSON.parse(params) : params;
                return Object.entries(parsed)
                    .map(([key, value]) => `${key}: ${value}`)
                    .join(', ');
            } catch {
                return params;
            }
        }

        // Format date
        function formatDate(dateStr) {
            if (!dateStr) return '-';
            try {
                const date = new Date(dateStr);
                return date.toLocaleDateString('tr-TR') + ' ' + date.toLocaleTimeString('tr-TR');
            } catch {
                return dateStr;
            }
        }

        // Update pagination
        function updatePagination() {
            const totalPages = Math.max(1, Math.ceil(filteredLogs.length / PAGE_SIZE));
            logsPagination.innerHTML = '';
            
            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `<a href="#" class="page-link" data-page="prev"><i class="ti ti-chevron-left"></i></a>`;
            logsPagination.appendChild(prevLi);
            
            // Page numbers (show max 5 pages)
            const startPage = Math.max(1, currentPage - 2);
            const endPage = Math.min(totalPages, startPage + 4);
            
            for (let p = startPage; p <= endPage; p++) {
                const li = document.createElement('li');
                li.className = `page-item ${p === currentPage ? 'active' : ''}`;
                li.innerHTML = `<a href="#" class="page-link" data-page="${p}">${p}</a>`;
                logsPagination.appendChild(li);
            }
            
            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `<a href="#" class="page-link" data-page="next"><i class="ti ti-chevron-right"></i></a>`;
            logsPagination.appendChild(nextLi);
        }

        // Filter logs
        function filterLogs() {
            const query = (searchInput?.value || '').toLowerCase().trim();
            if (!query) {
                filteredLogs = [...allLogs];
            } else {
                filteredLogs = allLogs.filter(log => 
                    (log.userName || '').toLowerCase().includes(query) ||
                    (log.userEmail || '').toLowerCase().includes(query) ||
                    (log.queryType || '').toLowerCase().includes(query) ||
                    (log.ip || '').toLowerCase().includes(query) ||
                    formatParameters(log.parameters).toLowerCase().includes(query)
                );
            }
            currentPage = 1;
            renderLogs();
        }

        // Event listeners
        searchInput?.addEventListener('input', filterLogs);
        
        refreshBtn?.addEventListener('click', loadLogs);
        
        logsPagination?.addEventListener('click', function(e) {
            const a = e.target.closest('a.page-link');
            if (!a) return;
            e.preventDefault();
            
            const target = a.getAttribute('data-page');
            const totalPages = Math.max(1, Math.ceil(filteredLogs.length / PAGE_SIZE));
            
            if (target === 'prev' && currentPage > 1) {
                currentPage--;
            } else if (target === 'next' && currentPage < totalPages) {
                currentPage++;
            } else if (!isNaN(Number(target))) {
                currentPage = Number(target);
            }
            
            renderLogs();
        });

        // View log details
        window.viewLogDetails = function(logId) {
            const log = allLogs.find(l => l.id === logId);
            if (!log) return;
            
            // Create modal content
            const modalContent = `
                <div class="modal fade" id="logDetailModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog modal-lg modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">
                                    <i class="ti ti-info-circle me-2"></i>Sorgu Detayları
                                </h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label class="form-label fw-semibold">Kullanıcı:</label>
                                        <p class="mb-0">${log.userName || 'Bilinmeyen'} (${log.userEmail || ''})</p>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label fw-semibold">Sorgu Tipi:</label>
                                        <p class="mb-0">
                                            <span class="query-type-badge query-type-${getQueryTypeClass(log.queryType)}">
                                                ${log.queryType || 'Bilinmeyen'}
                                            </span>
                                        </p>
                                    </div>
                                    <div class="col-12">
                                        <label class="form-label fw-semibold">Parametreler:</label>
                                        <div class="bg-light p-3 rounded">
                                            <code>${formatParameters(log.parameters)}</code>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label fw-semibold">Sonuç Sayısı:</label>
                                        <p class="mb-0">
                                            <span class="result-badge ${log.success ? '' : 'bg-danger-subtle text-danger'}">
                                                ${log.resultCount || 0} sonuç
                                                ${!log.success ? ' (Hata)' : ''}
                                            </span>
                                        </p>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label fw-semibold">IP Adresi:</label>
                                        <p class="mb-0">${log.ip || 'Bilinmeyen'}</p>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label fw-semibold">Tarih:</label>
                                        <p class="mb-0">${formatDate(log.createdAt)}</p>
                                    </div>
                                    <div class="col-md-6">
                                        <label class="form-label fw-semibold">Durum:</label>
                                        <p class="mb-0">
                                            <span class="badge ${log.success ? 'bg-success' : 'bg-danger'}">
                                                ${log.success ? 'Başarılı' : 'Hatalı'}
                                            </span>
                                        </p>
                                    </div>
                                    ${log.error ? `
                                    <div class="col-12">
                                        <label class="form-label fw-semibold">Hata Mesajı:</label>
                                        <div class="bg-danger-subtle p-3 rounded">
                                            <code class="text-danger">${log.error}</code>
                                        </div>
                                    </div>
                                    ` : ''}
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Remove existing modal if any
            const existingModal = document.getElementById('logDetailModal');
            if (existingModal) {
                existingModal.remove();
            }
            
            // Add modal to body
            document.body.insertAdjacentHTML('beforeend', modalContent);
            
            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('logDetailModal'));
            modal.show();
            
            // Remove modal from DOM when hidden
            document.getElementById('logDetailModal').addEventListener('hidden.bs.modal', function() {
                this.remove();
            });
        };

        // Initialize
        loadLogs();
    })();
    </script>

</body>
</html>
